<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://githaojiejie.github.io/</id>
    <title>我也有一颗糖</title>
    <updated>2021-08-23T06:50:40.110Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://githaojiejie.github.io/"/>
    <link rel="self" href="https://githaojiejie.github.io/atom.xml"/>
    <subtitle>为什么你不在, 问山风你会回来...</subtitle>
    <logo>https://githaojiejie.github.io/images/avatar.png</logo>
    <icon>https://githaojiejie.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 我也有一颗糖</rights>
    <entry>
        <title type="html"><![CDATA[路]]></title>
        <id>https://githaojiejie.github.io/post/lu/</id>
        <link href="https://githaojiejie.github.io/post/lu/">
        </link>
        <updated>2021-08-20T10:30:11.000Z</updated>
        <content type="html"><![CDATA[<p>你不记得自己是怎么来到这辆车上的，但自从你来到这里，他们就把最好的座位让给了你。</p>
<p>在一次短暂的停车后，你猛然发现，曾经熟悉的那个人，已经站在车下了。你赶快跑到车窗旁，你想问问他为什么在这就下车了？为什么不能再多坐一段路呢？</p>
<p>但车窗太厚了，无论你的声音有多大，窗外都听不到。</p>
<p>但他似乎知道你说了什么，他看着你，笑着对你说：别哭，没事儿，我到站了，你要继续走，因为路还长着呢。</p>
<p>你不知道他们下车后去了哪里？但你相信他们去了更好的地方，你相信他们现在过的都很好。</p>
<div class="tvcontainer">
<iframe class="tv"  src="https://player.bilibili.com/player.html?cid=145147963&aid=84267566&page=1&as_wide=1&high_quality=1&danmaku=0"frameborder="no" scrolling="no"></iframe>
</div>
<p>​																																																								2021年8月20日 周五晚</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于AI]]></title>
        <id>https://githaojiejie.github.io/post/guan-yu-ai/</id>
        <link href="https://githaojiejie.github.io/post/guan-yu-ai/">
        </link>
        <updated>2021-08-19T12:14:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ai框架">AI框架</h1>
<h2 id="1-几种ai的设计">1. 几种AI的设计</h2>
<p>AI在游戏中很多，但是为什么大家总是感觉ai编写起来十分困难，我后来思考了一番，主要原因是使用的方法不当。之前大家编写ai主要有几种方案：</p>
<h3 id="a-状态机">a. 状态机</h3>
<p>我是不知道谁想出来这个做法的，真是无力吐槽。本来对象身上任何数据都是状态，这种方法又要把一些状态定义成一种新的节点，对象身上状态变化会引起节点之间的转换，执行对应的方法，比如OnEnter OnExit等等。这里以怪物来举例，怪物可以分为多种状态，巡逻，攻击，追逐，返回。怪物的状态变化有:</p>
<p>巡逻-&gt;追逐  巡逻状态发现远处有敌人变追逐状态<br>
巡逻-&gt;攻击  巡逻发现可以攻击敌人变攻击状态<br>
攻击-&gt;追逐  攻击状态发现敌人有段距离于是去追逐<br>
攻击-&gt;返回  攻击状态发现距离敌人过远变返回状态<br>
追逐-&gt;返回  追逐状态发现距离敌人过远变返回状态</p>
<p>太多状态转换了，这里有没有漏掉我已经难以发现了。一旦节点更多，任何两个节点都可能需要连接，将成为超级复杂的网状结构，复杂度是N的平方级，维护起来十分困难。为了解决网状结构变复杂的问题于是又升级为分层状态机等等。当然各种打补丁的方法还是没能解决本质的问题。用不好状态机不是你们的问题，是状态机的问题。</p>
<h3 id="b-行为树">b. 行为树</h3>
<p>可能大家都觉得状态机解决复杂ai实在太困难了，于是有人想出了行为树来做ai。行为树的ai是响应式ai，这棵树从上往下（或者从左往右执行，这里以从上往下举例）实际上是把action节点排了个优先级，上面的action最先判断是否满足条件，满足则执行。这里就不详细讲了。行为树的复杂度是N，比状态机大大简化了，但是仍然存在不少缺陷，ai太复杂的时候，树会变得非常大，而且难以重构。比如我们自己项目，要做一个跟人差不多的机器人ai，自动做任务，打怪，玩游戏中的系统，跟人聊天，甚至攻击别人。想象一下，这颗树将变得多复杂！行为树的另外一个缺陷是某些action节点是个持久的过程，也就是说是个协程，行为树管理起协程起来不太好处理，比如上面的例子，需要移动到目标身边，这个移动究竟是做成协程呢，还是每帧move呢？这是个难题，怎么做都不舒服。</p>
<h2 id="2-我的做法">2. 我的做法</h2>
<p>ai是什么呢？很简单啊，ai就是不停的根据当前的状态，执行相应的行为。记住这两句话，很重要，这就是ai的本质！这两句话分成两部分，一是状态判断，二是执行行为。状态判断好理解，行为是啥？以上面状态机的怪物举例子，怪物的行为就是 巡逻，攻击敌人，返回巡逻点。比如：</p>
<p>巡逻  （当怪物在巡逻范围内，周围没有敌人，选择下一个巡逻点，移动）<br>
攻击敌人  （当怪物发现警戒范围内有敌人，如果攻击距离够就攻击，不够就移动过去攻击）<br>
返回  （当怪物发现离出生点超过一定距离，加上无敌buff，往出生点移动,到了出生点，删除无敌buff）</p>
<p>跟状态机不一样的是，这3个状态的变化完全不关心上一个状态是啥，只关心当前的条件是否满足，满足就执行行为。行为可能能瞬间执行，也可能是一段持续的过程，比如巡逻，选下一个巡逻点移动过去，走到了再选一个点，不停的循环。比如攻击敌人，可能需要移动到目标去攻击。</p>
<p>怎么设计这个ai框架呢？到这里就十分简单了，抽象出ai节点，每个节点包含条件判断，跟执行行为。行为方法应该是一个协程</p>
<pre><code class="language-csharp">public class AINode
{
	public virtual bool Check(Unit unit) // 检测条件是否满足
	{		
	}

	public virtual ETTask Run(Unit unit)
	{		
	}
}
</code></pre>
<p>进一步思考，假如怪物在巡逻过程中，发现敌人，那么怪物应该要打断当前的巡逻，转而去执行攻击敌人的行为。因此我们行为应该需要支持被打断，也就是说行为协程应该支持取消，这点特别需要注意，行为Run方法中任何协程都要支持取消操作！</p>
<pre><code class="language-csharp">public class AINode
{
	public virtual bool Check(Unit unit)
	{		
	}

	public virtual ETVoid Run(Unit unit, ETCancelToken cancelToken)
	{
	}
}
</code></pre>
<p>实现三个ai节点 XunLuoNode(巡逻)  GongjiNode(攻击)  FanHuiNode(返回)</p>
<pre><code class="language-csharp">public class XunLuoNode: AINode
{
	public virtual bool Check(Unit unit)
	{
		if (不在巡逻范围)
		{
			return false;
		}
		if (周围有敌人)
		{
			return false;
		}
		return true;
	}

	public virtual ETVoid Run(Unit unit, ETCancelToken cancelToken)
	{
		while (true)
		{
			Vector3 nextPoint = FindNextPoint();
			bool ret = await MoveToAsync(nextPoint, cancelToken); // 移动到目标点, 返回false表示协程取消
			if (!ret)
			{
				return;
			}
			// 停留两秒, 注意这里要能取消，任何协程都要能取消
			bool ret = await TimeComponent.Instance.Wait(2000, cancelToken);
			if (!ret)
			{
				return;
			}
		}
	}
}
</code></pre>
<p>同理可以实现另外两个节点。光设计出节点还不行，还需要把各个节点串起来，这样ai才能转动</p>
<pre><code class="language-csharp">AINode[] aiNodes = {xunLuoNode, gongjiNode, fanHuiNode};
AINode current;
ETCancelToken cancelToken;
while(true)
{
	// 每秒中需要重新判断是否满足新的行为了，这个时间可以自己定
	await TimeComponent.Instance.Wait(1000);

	AINode next;
	foreach(var node in aiNodes)
	{
		if (node.Check())
		{
			next = node;
			break;
		}
	}

	if (next == null)
	{
		continue;
	}

	// 如果下一个节点跟当前执行的节点一样，那么就不执行
	if (next == current)
	{
		continue;
	}

	// 停止当前协程
	cancelToken.Cancel();

	// 执行下一个协程
	cancelToken = new ETCancelToken();
	next.Run(unit, cancelToken).Coroutine();
}
</code></pre>
<p>这段代码十分简单，意思就是每秒钟遍历节点，直到找到一个满足条件的节点就执行，等下一秒再判断，执行下一个节点之前，先打断当前执行的协程。<br>
几个使用误区:</p>
<ol>
<li>行为中如果有协程必须能够取消，并且传入cancelToken，否则会出大事，因为怪物一旦满足执行下个节点，需要取消当前协程。</li>
<li>跟行为树与状态机不同，节点的作用只是一块逻辑，节点并不需要共享。共享的是协程方法，比如MoveToAsync，怪物巡逻节点可以使用，怪物攻击敌人节点中追击敌人也可以使用。</li>
<li>节点可以做的非常庞大，比如自动做任务节点，移动到npc，接任务，根据任务的子任务做子任务，比如移动到怪点打怪，移动到采集物去采集等等，做完所有子任务，移动到交任务npc交任务。所有的一切都是写在一个while循环中，利用协程串起来。</li>
</ol>
<p>思考一个大问题，怎么设计一个压测机器人呢？压测机器人需要做到什么？自动做任务，自动玩各种系统，自动攻击敌人，会反击，会找人聊天等等。把上面说的每一条做成一个ai节点即可。兄弟们，AI简不简单?</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更好的协程]]></title>
        <id>https://githaojiejie.github.io/post/geng-hao-de-xie-cheng/</id>
        <link href="https://githaojiejie.github.io/post/geng-hao-de-xie-cheng/">
        </link>
        <updated>2021-08-19T11:57:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="更好的协程">更好的协程</h1>
<p>上文讲了一串回调就是协程，显然这样写代码，增加逻辑，插入逻辑非常容易出错。我们需要利用异步语法把这个异步回调的形式改成同步的形式，幸好C#已经帮我们设计好了，看代码</p>
<pre><code class="language-csharp">    // example2_2
    class Program
    {
        private static int loopCount = 0;
        
        static void Main(string[] args)
        {
            OneThreadSynchronizationContext _ = OneThreadSynchronizationContext.Instance;

            Console.WriteLine($&quot;主线程: {Thread.CurrentThread.ManagedThreadId}&quot;);
            
            Crontine();
            
            while (true)
            {
                OneThreadSynchronizationContext.Instance.Update();
                
                Thread.Sleep(1);
                
                ++loopCount;
                if (loopCount % 10000 == 0)
                {
                    Console.WriteLine($&quot;loop count: {loopCount}&quot;);
                }
            }
        }

        private static async void Crontine()
        {
            await WaitTimeAsync(5000);
            Console.WriteLine($&quot;当前线程: {Thread.CurrentThread.ManagedThreadId}, WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
            await WaitTimeAsync(4000);
            Console.WriteLine($&quot;当前线程: {Thread.CurrentThread.ManagedThreadId}, WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
            await WaitTimeAsync(3000);
            Console.WriteLine($&quot;当前线程: {Thread.CurrentThread.ManagedThreadId}, WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
        }
        
        private static Task WaitTimeAsync(int waitTime)
        {
            TaskCompletionSource&lt;bool&gt; tcs = new TaskCompletionSource&lt;bool&gt;();
            Thread thread = new Thread(()=&gt;WaitTime(waitTime, tcs));
            thread.Start();
            return tcs.Task;
        }
        
        /// &lt;summary&gt;
        /// 在另外的线程等待
        /// &lt;/summary&gt;
        private static void WaitTime(int waitTime, TaskCompletionSource&lt;bool&gt; tcs)
        {
            Thread.Sleep(waitTime);
            
            // 将tcs扔回主线程执行
            OneThreadSynchronizationContext.Instance.Post(o=&gt;tcs.SetResult(true), null);
        }
    }
</code></pre>
<p>在这段代码里面，WaitTimeAsync方法中，我们利用了TaskCompletionSource类替代了之前传入的Action参数，WaitTimeAsync方法返回了一个Task类型的结果。WaitTime中我们把action()替换成了tcs.SetResult(true),WaitTimeAsync方法前使用await关键字，这样可以将一连串的回调改成同步的形式。这样一来代码显得十分简洁，开发起来也方便多了。</p>
<p>这里还有个技巧，我们发现WaitTime中需要将tcs.SetResult扔回到主线程执行，微软给我们提供了一种简单的方法，参考example2_2_2，在主线程设置好同步上下文，</p>
<pre><code class="language-csharp">// example2_2_2
SynchronizationContext.SetSynchronizationContext(OneThreadSynchronizationContext.Instance);
</code></pre>
<p>在WaitTime中直接调用tcs.SetResult(true)就行了，回调会自动扔到同步上下文中，而同步上下文我们可以在主线程中取出回调执行，这样自动能够完成回到主线程的操作</p>
<pre><code class="language-csharp">        private static void WaitTime(int waitTime, TaskCompletionSource&lt;bool&gt; tcs)
        {
            Thread.Sleep(waitTime);

            tcs.SetResult(true);
        }
</code></pre>
<p>如果不设置同步上下文，你会发现打印出来当前线程就不是主线程了，这也是很多第三方库跟.net core内置库的用法，默认不回调到主线程，所以我们使用的时候需要设置下同步上下文。其实这个设计本人觉得没有必要，交由库的开发者去实现更好，尤其是在游戏开发中，逻辑全部是单线程的，回调每次都走一遍同步上下文就显得多余了，所以ET框架提供了不使用同步上下文的实现ETTask，代码更加简洁更加高效，这个后面会讲到。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[协程]]></title>
        <id>https://githaojiejie.github.io/post/xie-cheng/</id>
        <link href="https://githaojiejie.github.io/post/xie-cheng/">
        </link>
        <updated>2021-08-19T11:56:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是协程">什么是协程</h1>
<p>说到协程，我们先了解什么是异步，异步简单说来就是，我要发起一个调用，但是这个被调用方（可能是其它线程，也可能是IO）出结果需要一段时间，我不想让这个调用阻塞住调用方的整个线程，因此传给被调用方一个回调函数，被调用方运行完成后回调这个回调函数就能通知调用方继续往下执行。举个例子:<br>
下面的代码，主线程一直循环，每循环一次sleep 1毫秒，计数加一，每10000次打印一次。</p>
<pre><code class="language-csharp">        private static void Main()
        {
            int loopCount = 0;
            while (true)
            {
                int temp = watcherValue;
                
                Thread.Sleep(1);
                
                ++loopCount;
                if (loopCount % 10000 == 0)
                {
                    Console.WriteLine($&quot;loop count: {loopCount}&quot;);
                }
            }
        }
</code></pre>
<p>这时我需要加个功能，在程序一开始，我希望在5秒钟之后打印出loopCount的值。看到5秒后我们可以想到Sleep方法，它会阻塞线程一定时间然后继续执行。我们显然不能在主线程中Sleep，因为会破坏掉每10000次计数打印一次的逻辑。</p>
<pre><code class="language-csharp">    // example2_1
    class Program
    {
        private static int loopCount = 0;

        private static void Main()
        {
            OneThreadSynchronizationContext _ = OneThreadSynchronizationContext.Instance;
            
            WaitTimeAsync(5000, WaitTimeFinishCallback);
            
            while (true)
            {
                OneThreadSynchronizationContext.Instance.Update();
                
                Thread.Sleep(1);
                
                ++loopCount;
                if (loopCount % 10000 == 0)
                {
                    Console.WriteLine($&quot;loop count: {loopCount}&quot;);
                }
            }
        }

        private static void WaitTimeAsync(int waitTime, Action action)
        {
            Thread thread = new Thread(()=&gt;WaitTime(waitTime, action));
            thread.Start();
        }
        
        private static void WaitTimeFinishCallback()
        {
            Console.WriteLine($&quot;WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
        }

        /// &lt;summary&gt;
        /// 在另外的线程等待
        /// &lt;/summary&gt;
        private static void WaitTime(int waitTime, Action action)
        {
            Thread.Sleep(waitTime);
            
            // 将action扔回主线程执行
            OneThreadSynchronizationContext.Instance.Post((o)=&gt;action(), null);
        }
    }
</code></pre>
<p>我们在这里设计了一个WaitTimeAsync方法，WaitTimeAsync其实就是一个典型的异步方法，它从主线程发起调用，传入了一个WaitTimeFinishCallback回调方法做参数，开启了一个线程，线程Sleep一定时间后，将传过来的回调扔回到主线程执行。OneThreadSynchronizationContext是一个跨线程队列，任何线程可以往里面扔委托，OneThreadSynchronizationContext的Update方法在主线程中调用，会将这些委托取出来放到主线程执行。为什么回调方法需要扔回到主线程执行呢？因为回调方法中读取了loopCount，loopCount在主线程中也有读写，所以要么加锁，要么永远保证只在主线程中读写。加锁是个不好的做法，代码中到处是锁会导致阅读跟维护困难，很容易产生多线程bug。这种将逻辑打包成委托然后扔回另外一个线程是多线程开发中常用的技巧。</p>
<p>我们可能又有个新需求，WaitTimeFinishCallback执行完成之后，再想等3秒，再打印一下loopCount。</p>
<pre><code class="language-csharp">        private static void WaitTimeAsync(int waitTime, Action action)
        {
            Thread thread = new Thread(()=&gt;WaitTime(waitTime, action));
            thread.Start();
        }
        private static void WaitTimeFinishCallback()
        {
            Console.WriteLine($&quot;WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
            WaitTimeAsync(3000, WaitTimeFinishCallback2);
        }
        
        private static void WaitTimeFinishCallback2()
        {
            Console.WriteLine($&quot;WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
        }
</code></pre>
<p>我们这时还可能改需求，需要在程序启动5秒后，接下来4秒，再接下来3秒，打印loopCount，也就是上面的逻辑中间再插入一个3秒等待。</p>
<pre><code class="language-csharp">        private static void WaitTimeAsync(int waitTime, Action action)
        {
            Thread thread = new Thread(()=&gt;WaitTime(waitTime, action));
            thread.Start();
        }
        
        private static void WaitTimeFinishCallback()
        {
            Console.WriteLine($&quot;WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
            WaitTimeAsync(4000, WaitTimeFinishCallback3);
        }
        
        private static void WaitTimeFinishCallback3()
        {
            Console.WriteLine($&quot;WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
            WaitTimeAsync(3000, WaitTimeFinishCallback2);
        }
        
        private static void WaitTimeFinishCallback2()
        {
            Console.WriteLine($&quot;WaitTimeAsync finsih loopCount的值是: {loopCount}&quot;);
        }
</code></pre>
<p>这样中间插入一段代码，显得非常麻烦。这里可以回答什么是协程了，其实这一串串回调就是协程。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ILRuntime]]></title>
        <id>https://githaojiejie.github.io/post/ilruntime/</id>
        <link href="https://githaojiejie.github.io/post/ilruntime/">
        </link>
        <updated>2021-08-19T11:25:49.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>基础知识<br>
官方文档：https://ourpalm.github.io/ILRuntime/<br>
离线帮助文档目录：ILRuntime\docs\source\src\v1\guide<br>
官方Unity3D热更例子工程：https://github.com/Ourpalm/ILRuntimeU3D/</p>
</li>
<li>
<p>ILRuntime肯定可以做到IOS的热更。</p>
</li>
<li>
<p>本文中的名词解释：</p>
<p>域 : 应用程序的上下文，可以理解为使用热更之后，在游戏中存在两个域，一个是游戏主程序，另一     个是热更域。</p>
<p>CLR: Unity脚本(C#)的公共运行库，公共运行环境</p>
<p>Assembly-CSharp.dll: Unity脚本(C#)的编译成的dll，非特殊目录下的脚本都放在这个dll      下。安卓下可通过反射获取方法和变量。</p>
<p>hotFix.dll： 指热更工程生成的dll，和Unity主工程是两个不同的dll。</p>
</li>
<li>
<p>调试插件<br>
http://ourpalm.github.io/ILRuntime/public/v1/guide/tutorial.html</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不期而遇的夏天 - 陈奕迅]]></title>
        <id>https://githaojiejie.github.io/post/bu-qi-er-yu-de-xia-tian-chen-yi-xun/</id>
        <link href="https://githaojiejie.github.io/post/bu-qi-er-yu-de-xia-tian-chen-yi-xun/">
        </link>
        <updated>2021-08-19T10:08:51.000Z</updated>
        <content type="html"><![CDATA[<iframe class="music" frameborder="no" src="//music.163.com/outchain/player?type=2&id=1869983814&auto=1&height=90"></iframe>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[牛逼的网站]]></title>
        <id>https://githaojiejie.github.io/post/niu-bi-de-wang-zhan/</id>
        <link href="https://githaojiejie.github.io/post/niu-bi-de-wang-zhan/">
        </link>
        <updated>2021-08-19T07:27:46.000Z</updated>
        <content type="html"><![CDATA[<p>AI分享网站 : http://www.aisharing.com/sitemap<br>
卡通资源网 : https://www.spriters-resource.com/<br>
UGUI : https://bitbucket.org/UnityUIExtensions/unity-ui-extensions/src/release/<br>
攀爬系统 : https://bitbucket.org/catlikecodingunitytutorials/movement-08-climbing/commits/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Readme]]></title>
        <id>https://githaojiejie.github.io/post/Readme/</id>
        <link href="https://githaojiejie.github.io/post/Readme/">
        </link>
        <updated>2021-08-19T05:33:10.000Z</updated>
        <summary type="html"><![CDATA[<iframe class="music" frameborder="no" src="//music.163.com/outchain/player?type=2&id=1808268483&auto=1&height=90"></iframe>
<p>作为技术博客记录成长的过程</p>
]]></summary>
        <content type="html"><![CDATA[<iframe class="music" frameborder="no" src="//music.163.com/outchain/player?type=2&id=1808268483&auto=1&height=90"></iframe>
<p>作为技术博客记录成长的过程</p>
<!-- more -->
]]></content>
    </entry>
</feed>